<?xml version="1.0" encoding="utf-8"?>
<Project>

	<!-- Standard Configuration -->
	<PropertyGroup Label="Framework and Language">
		<TargetFrameworks>net8.0;net9.0</TargetFrameworks>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<!-- Enable Internal Testing -->
	<ItemGroup Label="Test Internals">
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>Tests.$(AssemblyName)</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!-- Documentation -->
	<PropertyGroup Label="Documentation" Condition="'$(Configuration)'=='Release'">
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
	</PropertyGroup>

	<!-- Get Paths to Files -->
	<PropertyGroup>
		<SolutionFilePath>$([MSBuild]::GetPathOfFileAbove('Rqlite.sln'))</SolutionFilePath>
		<SolutionRootPath>$([System.IO.Path]::GetDirectoryName('$(SolutionFilePath)'))</SolutionRootPath>
	</PropertyGroup>
	<PropertyGroup>
		<LicenceFile>LICENSE</LicenceFile>
		<LicencePath>$([MSBuild]::GetPathOfFileAbove('$(LicenceFile)'))</LicencePath>
		<LocalPackFile>Local.pack.props</LocalPackFile>
		<LocalPackPath>$([MSBuild]::GetPathOfFileAbove('$(LocalPackFile)'))</LocalPackPath>
		<!--<LogoFile>logo.png</LogoFile>
		<LogoPath>$([System.IO.Path]::Combine('$(SolutionRootPath)', 'artwork', '$(LogoFile)'))</LogoPath>-->
		<ReadmeFile>README.md</ReadmeFile>
		<ReadmePath>$([MSBuild]::GetPathOfFileAbove('$(ReadmeFile)', '$(MSBuildProjectDirectory)'))</ReadmePath>
		<VersionFile>Version</VersionFile>
		<VersionPath>$([MSBuild]::GetPathOfFileAbove('$(VersionFile)'))</VersionPath>
	</PropertyGroup>

	<!-- Import Files -->
	<ItemGroup Label="Files" Condition="'$(Configuration)'=='Release'">
		<None Include="$(LicencePath)" Pack="true" PackagePath="/"/>
		<!--<None Include="$(LogoPath)" Pack="true" PackagePath="/"/>-->
		<None Include="$(ReadmePath)" Pack="true" PackagePath="/"/>
	</ItemGroup>

	<!-- Read Version File -->
	<PropertyGroup Label="Version">
		<RqliteVersion>$([System.IO.File]::ReadAllText('$(VersionPath)'))</RqliteVersion>
	</PropertyGroup>

	<!-- Package Configuration -->
	<PropertyGroup Label="Package Configuration">
		<Authors>bfren</Authors>
		<Company>bfren.dev</Company>
		<Copyright>Copyright Â© bfren.dev $([System.DateTime]::Now.ToString(yyyy))</Copyright>
		<DebugType>embedded</DebugType>
		<Description>$(MSBuildProjectName) library</Description>
		<!--<PackageIcon>$(LogoFile)</PackageIcon>-->
		<PackageLicenseFile>$(LicenceFile)</PackageLicenseFile>
		<PackageProjectUrl>https://github.com/bfren/rqlite/wiki</PackageProjectUrl>
		<PackageReadmeFile>$(ReadmeFile)</PackageReadmeFile>
		<PackageTags>Rqlite;client;orm</PackageTags>
		<RepositoryUrl>https://github.com/bfren/rqlite</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<Version>$(RqliteVersion)</Version>
	</PropertyGroup>

	<!--
		[Optional]
		Create Local Packages
		Use 'DispatchToInnerBuilds' target to run after builds are completed for all frameworks
			1. Import local repo
			2. Enable package validation
			3. Create package
			4. Publish package to local repository
			5. Cleanup
	-->
	<Import Project="$(LocalPackPath)" Condition="Exists('$(LocalPackPath)') and '$(Configuration)'=='Release'"/>
	<!--<PropertyGroup Label="Local Package Validation" Condition="Exists('$(LocalPackPath)') and '$(Configuration)'=='Release'">
		<EnablePackageValidation>true</EnablePackageValidation>
		<PackageValidationBaselineVersion>9.3.0</PackageValidationBaselineVersion>
	</PropertyGroup>-->
	<Target Name="PackAndPushToLocalNuget" AfterTargets="DispatchToInnerBuilds" Condition="Exists('$(LocalPackPath)') and '$(Configuration)'=='Release'">
		<Exec Command="dotnet pack &quot;$(ProjectFileName)&quot; -p:PackageVersion=$(RqliteVersion) --no-build --configuration Release"/>
		<Exec Command="nuget init &quot;$(MSBuildProjectDirectory)\bin\Release&quot; &quot;$(LocalNugetRepository)&quot;"/>
		<Exec Command="del &quot;$(MSBuildProjectDirectory)\bin\Release\*.nupkg&quot;"/>
	</Target>

</Project>
